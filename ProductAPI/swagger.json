{
  "swagger": "2.0",
  "info": {},
  "paths": {
    "/products": {
      "get": {
        "description": "Returns a list of all products in the database",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "products"
        ],
        "operationId": "listProducts",
        "responses": {
          "200": {
            "$ref": "#/responses/productList"
          },
          "500": {
            "$ref": "#/responses/errorServer"
          }
        }
      },
      "post": {
        "description": "Creates a new product in the database",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "products"
        ],
        "operationId": "addProduct",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "Product Information required to create / update a product",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/productRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/productResponse"
          },
          "400": {
            "$ref": "#/responses/errorInvalidJSON"
          },
          "422": {
            "$ref": "#/responses/errorValidation"
          },
          "500": {
            "$ref": "#/responses/errorServer"
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "description": "Returns a single product from the database",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "products"
        ],
        "operationId": "getProduct",
        "parameters": [
          {
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "description": "The Product ID to update / delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/productResponse"
          },
          "404": {
            "$ref": "#/responses/errorProductNotFound"
          },
          "422": {
            "$ref": "#/responses/errorValidation"
          },
          "500": {
            "$ref": "#/responses/errorServer"
          }
        }
      },
      "put": {
        "description": "Updates the product with the specified Id in the database with new product data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "products"
        ],
        "operationId": "updateProduct",
        "parameters": [
          {
            "x-go-name": "Body",
            "description": "Product Information required to create / update a product",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/productRequest"
            }
          },
          {
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "description": "The Product ID to update / delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/productResponse"
          },
          "400": {
            "$ref": "#/responses/errorInvalidJSON"
          },
          "404": {
            "$ref": "#/responses/errorProductNotFound"
          },
          "422": {
            "$ref": "#/responses/errorValidation"
          },
          "500": {
            "$ref": "#/responses/errorServer"
          }
        }
      },
      "delete": {
        "description": "Deletes a product with the specified id from the database",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "products"
        ],
        "operationId": "deleteProduct",
        "parameters": [
          {
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "description": "The Product ID to update / delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/successNoContent"
          },
          "404": {
            "$ref": "#/responses/errorProductNotFound"
          },
          "422": {
            "$ref": "#/responses/errorValidation"
          },
          "500": {
            "$ref": "#/responses/errorServer"
          }
        }
      }
    }
  },
  "definitions": {
    "Product": {
      "description": "Structure of the API Product",
      "type": "object",
      "properties": {
        "description": {
          "description": "Description of the Product",
          "type": "string",
          "maxLength": 50,
          "minLength": 10,
          "x-go-name": "Description"
        },
        "id": {
          "description": "Product ID",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "description": "Name of the Product",
          "type": "string",
          "maxLength": 20,
          "minLength": 3,
          "x-go-name": "Name"
        },
        "price": {
          "description": "Price of the Product",
          "type": "number",
          "format": "double",
          "minimum": 0.01,
          "x-go-name": "Price"
        },
        "sku": {
          "description": "SKU of the Product",
          "type": "string",
          "maxLength": 15,
          "minLength": 8,
          "x-go-name": "SKU"
        }
      },
      "x-go-package": "github.com/ramanchawla1290/GO/ProductAPI/data"
    },
    "productRequest": {
      "type": "object",
      "required": [
        "name",
        "description",
        "price",
        "sku"
      ],
      "properties": {
        "description": {
          "description": "Description of the product",
          "type": "string",
          "maxLength": 50,
          "minLength": 10,
          "x-go-name": "Description"
        },
        "name": {
          "description": "Name of the product",
          "type": "string",
          "maxLength": 20,
          "minLength": 3,
          "x-go-name": "Name"
        },
        "price": {
          "description": "Price of the product",
          "type": "number",
          "format": "double",
          "minimum": 0.01,
          "x-go-name": "Price"
        },
        "sku": {
          "description": "SKU of the product",
          "type": "string",
          "maxLength": 15,
          "minLength": 8,
          "pattern": "[A-Z]+-[A-Z]+-[0-9]+",
          "x-go-name": "SKU"
        }
      },
      "x-go-package": "github.com/ramanchawla1290/GO/ProductAPI/handlers"
    }
  },
  "responses": {
    "errorInvalidJSON": {
      "description": "Error message as a string response for invalid JSON payload"
    },
    "errorProductNotFound": {
      "description": "Error message as a string response for Product Id not found"
    },
    "errorServer": {
      "description": "Error message as a string response for internal server error"
    },
    "errorValidation": {
      "description": "Error message as a string response for failed Validation"
    },
    "productList": {
      "description": "A list of products",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Product"
        }
      }
    },
    "productResponse": {
      "description": "Details of the product created/updated in the database",
      "schema": {
        "$ref": "#/definitions/Product"
      }
    },
    "successNoContent": {
      "description": "No Content"
    }
  }
}